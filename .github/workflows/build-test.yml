name: "Build and Deploy"

on:
  workflow_call:
    secrets:
      EVM_DEPLOYER:
        required: true
      GH_PKG_LOGIN:
        required: true
      GH_PKG_TOKEN:
        required: true
      SLACK_BOT_TOKEN:
        required: true

env:
  EVM_DEPLOYER: ${{ secrets.EVM_DEPLOYER }}

jobs:
  build-test:
    runs-on: 4x150g-runner
    name: Build and Test

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@1.81.0
        with:
          components: clippy, rustfmt
          targets: wasm32-unknown-unknown, i686-unknown-linux-gnu

      - name: Install Just command runner
        uses: extractions/setup-just@v1

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          cache: false

      - name: Install dfx
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: "0.23.0"

      - name: Install Protobuf compiler
        uses: arduino/setup-protoc@v3

      - name: Configure Rust Cache
        uses: Swatinem/rust-cache@v2
        if: ${{ (github.event.pull_request.base.ref != 'main') && (github.ref_name != 'main') }}
        with:
          shared-key: ${{ github.repository }}
          save-if: ${{ github.ref_type != 'tag' }}

      - name: install ic-wasm
        run: |
          wget https://github.com/dfinity/ic-wasm/releases/download/0.8.1/ic-wasm-linux64 -O /usr/local/bin/ic-wasm
          chmod +x /usr/local/bin/ic-wasm

      - name: install candid-extractor
        run: |
          wget https://github.com/dfinity/cdk-rs/releases/download/candid-extractor-v0.1.4/candid-extractor-x86_64-unknown-linux-gnu.tar.gz -O /tmp/candid-extractor-x86_64-unknown-linux-gnu.tar.gz
          tar -xvf /tmp/candid-extractor-x86_64-unknown-linux-gnu.tar.gz -C /usr/local/bin
          chmod +x /usr/local/bin/candid-extractor

      - name: setup environment
        run: |
          export RUST_BACKTRACE="full"
          sudo apt update
          sudo apt install -y gcc-multilib libunwind-dev ca-certificates

      - name: build solidity contracts
        run: |
          just build_solidity

      - name: check rust code style
        run: |
          just check_code

      - name: build artifacts
        run: |
          just build_all_canisters

          export GH_API_TOKEN=${{ secrets.GH_PKG_TOKEN }}
          just fetch_all_canisters

      - name: test
        if: ${{ !inputs.skip-test }}
        run: |
          just test_all

      - name: 32bits test
        if: ${{ !inputs.skip-test }}
        run: |
          just test_i686

      - name: dfx test
        if: ${{ !inputs.skip-test }}
        run: |
          just dfx_test
