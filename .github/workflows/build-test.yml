name: "Build and Deploy"

on:
  workflow_call:
    inputs:
      installation-method:
        required: true
        type: string
        description: "installation method, can be any of create, reinstall, upgrade"
      network:
        type: string
        required: false
        description: "network where canister will be deployed to"
        default: "ic"
      wallet:
        type: string
        required: false
        description: "owner wallet for canister"
        default: "4cfzs-sqaaa-aaaak-aegca-cai"
      chain_id:
        type: number
        required: false
        description: "chain id"
        default: 355113
      force_deploy:
        type: boolean
        required: false
        description: "if true, force deploy ignoring main branch"
        default: false

    secrets:
      EVM_DEPLOYER:
        required: true
      GH_PKG_LOGIN:
        required: true
      GH_PKG_TOKEN:
        required: true
      SLACK_BOT_TOKEN:
        required: true

env:
  EVM_DEPLOYER: ${{ secrets.EVM_DEPLOYER }}

jobs:
  build-test:
    runs-on: 4x150g-runner
    name: Build and Test

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          targets: wasm32-unknown-unknown, i686-unknown-linux-gnu

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          cache: false

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Install Protobuf compiler
        uses: arduino/setup-protoc@v3

      - name: Configure Rust Cache
        uses: Swatinem/rust-cache@v2
        if: ${{ (github.event.pull_request.base.ref != 'main') && (github.ref_name != 'main') }}
        with:
          shared-key: ${{ github.repository }}
          save-if: ${{ github.ref_type != 'tag' }}

      - name: setup environment
        run: |
          export RUST_BACKTRACE="full"
          cargo install ic-wasm
          cargo install icx-proxy
          sudo apt update
          sudo apt install gcc-multilib libunwind-dev

      - name: rustfmt
        run: |
          cargo fmt --all --check

      - name: clippy
        run: |
          cargo clippy --all-features --all-targets -- -D warnings

      - name: build
        run: |
          ./scripts/build_solidity.sh

          export ETHEREUM_GENESIS_ACCOUNTS=${{ inputs.ethereum_genesis_accounts }}
          ./scripts/build.sh

          export GH_API_TOKEN=${{ secrets.GH_PKG_TOKEN }}
          ./scripts/get_dependencies.sh

      - name: test
        if: ${{ !inputs.skip-test }}
        run: |
          ./scripts/tests/tests.sh

      - name: 32bits test
        if: ${{ !inputs.skip-test }}
        run: |
          ./scripts/tests/tests_i686.sh

      - name: dfx test
        if: ${{ !inputs.skip-test }}
        run: |
          ./scripts/tests/dfx_tests.sh --github-ci --docker
